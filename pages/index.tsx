import { Breadcrumb, Button, Col, Form, Row, Select } from "antd";
import type { NextPage } from "next";
import Head from "next/head";
import styles from "../styles/Home.module.css";
import { Input, Space } from "antd";
import qs from "qs";
import { Table } from "antd";
import { useEffect, useRef, useState } from "react";
import dayjs from "dayjs";

const columns = [
  {
    title: "Username",
    dataIndex: ["login", "username"],
    sorter: true,
    width: "20%",
  },
  {
    title: "Name",
    dataIndex: "name",
    sorter: true,
    render: (name: { first: any; last: any }) => `${name.first} ${name.last}`,
    width: "20%",
  },
  {
    title: "Gender",
    dataIndex: "gender",
    sorter: true,
    width: "20%",
  },
  {
    title: "Email",
    dataIndex: "email",
    sorter: true,
  },
  {
    title: "Registered Date",
    dataIndex: "registered",
    render: (e: {
      date: string | number | Date | dayjs.Dayjs | null | undefined;
    }) => dayjs(e?.date).format("DD-MM-YYYY HH:mm"),
    sorter: true,
  },
];

const getParams = (params: any) => {
  return {
    results: params.pagination?.pageSize,
    page: params.pagination?.current,
    ...params,
  };
};

const { Search } = Input;
const Home: NextPage = () => {
  const [loading, setLoading] = useState(false);
  const [dataSource, setDataSource] = useState([]);
  const [pagination, setPagination] = useState({
    current: 1,
    pageSize: 10,
  });

  const [form] = Form.useForm();
  const getData = (params: any) => {
    setLoading(true);
    fetch(`https://randomuser.me/api?${qs.stringify(getParams(params))}`)
      .then((res) => res.json())
      .then((data) => {
        setLoading(false);
        setDataSource(data?.results);
        setPagination({
          ...params.pagination,
          total: 100,
        });
      });
  };

  useEffect(() => {
    getData({ pagination });
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, []);

  const handleTableChange: any = (
    pagination: any,
    filters: any,
    sorter: { field: any; order: any }
  ) => {
    getData({
      sortField: sorter.field,
      sortOrder: sorter.order,
      pagination,
      ...filters,
    });
  };

  return (
    <div className={styles.container}>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        <Breadcrumb>
          <Breadcrumb.Item>Home</Breadcrumb.Item>
          <Breadcrumb.Item>Example Page</Breadcrumb.Item>
        </Breadcrumb>

        <Row className={styles.wrapper}>
          <Col span={24}>
            <h3>Example With Search and Filter</h3>
            <Form form={form} layout="vertical" className={styles.filter}>
              <Form.Item
                label="Search"
                name="keyword"
                style={{ marginRight: 10 }}
              >
                <Search
                  placeholder="input search text"
                  onSearch={(e) => {
                    getData({
                      pagination,
                      keyword: e,
                    });
                  }}
                  enterButton
                />
              </Form.Item>
              <Form.Item
                label="Gender"
                name="gender"
                style={{ marginRight: 10 }}
              >
                <Select
                  defaultValue="all"
                  style={{ width: 120 }}
                  onChange={(e) => {
                    getData({
                      pagination,
                      gender: e,
                    });
                  }}
                >
                  <Select.Option value="all">All</Select.Option>
                  <Select.Option value="male">Male</Select.Option>
                  <Select.Option value="female">Female</Select.Option>
                </Select>
              </Form.Item>
              <Form.Item>
                <Button
                  onClick={() => {
                    getData({
                      pagination: {
                        current: 1,
                        pageSize: 10,
                      },
                    });
                    form.resetFields()
                  }}
                >
                  Reset Filter
                </Button>
              </Form.Item>
            </Form>
            <Table
              columns={columns}
              rowKey={(record: any) => record.login.uuid}
              dataSource={dataSource}
              pagination={pagination}
              loading={loading}
              onChange={handleTableChange}
            />
          </Col>
        </Row>
      </main>
    </div>
  );
};

export default Home;
